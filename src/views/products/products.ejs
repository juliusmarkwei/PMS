<div>
    <!-- Hero Section -->
    <div class="bg-[#c05bc6] text-white py-4 text-center">
        <h1 class="text-4xl font-bold">
            Welcome to MacStore's Product Management Console
        </h1>
        <p class="mt-4">Organize, Manage, and Grow Your Products</p>
    </div>

    <!-- search and filter -->
    <div class="mb-6 grid grid-cols-6 items-center m-2">
        <form
            class="w-full max-w-md flex items-center relative col-span-4"
            action="/products/search"
            method="POST"
        >
            <input
                type="text"
                name="query"
                required
                placeholder="Search products by name or description"
                class="w-full px-4 py-2 pr-10 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#29C782]"
            />
            <button type="submit">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="search-icon absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer h-5 w-5"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
                    />
                </svg>
            </button>
        </form>

        <div class="ml-4">
            <select
                id="productCategory"
                class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#29C782]"
            >
                <option value="">Filter by category</option>
            </select>
        </div>
        <div class="ml-4">
            <select
                id="sortSelect"
                class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#29C782]"
            >
                <option value="title-asc">Name (A-Z)</option>
                <option value="title-asc">Name (A-Z)</option>
                <option value="title-desc">Name (Z-A)</option>
            </select>
        </div>
    </div>

    <!-- List products here -->
    <div class="grid grid-cols-3 md:grid-cols-5 gap-4 p-2">
        <% products && products.forEach(function(product) { %>
        <div
            class="bg-white border h-96 rounded-lg p-4 shadow-sm relative transform transition-all duration-300 hover:scale-105 hover:shadow-lg"
        >
            <img
                src="/products/<%= product.image %>"
                alt="<%= product.name %>"
                class="w-full h-[70%] object-cover rounded mb-4"
                onerror="this.src='/images/placeholder.png'"
            />
            <h3
                title="<%= product.name %>"
                class="text-medium font-semibold mb-2"
            >
                <%= product.name.length < 62 ? product.name :
                product.name.slice(0, 62) + '...' %>
            </h3>
            <div
                class="absolute bottom-2 flex justify-between w-full left-0 px-4"
            >
                <div class="flex justify-between items-center w-full">
                    <div class="flex gap-2 items-center justify-center">
                        <span class="text-[#c05bc6] font-bold">
                            Â¢<%= new Intl.NumberFormat('en-US', {
                            minimumFractionDigits: 2, maximumFractionDigits: 2
                            }).format(product.price) %>
                        </span>

                        <span class="text-gray-500 text-sm">
                            Stock: <%= product.stock %>
                        </span>
                    </div>
                    <a
                        href="/products/<%= product._id %>"
                        title="Click  to view more..."
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="size-6 hover:text-[#c05bc6]"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
                            />
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                            />
                        </svg>
                    </a>
                </div>
            </div>
        </div>
        <% }); %>
    </div>
    <!--  -->
    <% if (products.length === 0) { %>
    <div class="flex flex-col justify-items-center items-center m-auto">
        <h1 class="text-3xl font-bold text-gray-600">No products found</h1>
    </div>
    <% } %>
</div>

<script>
    // get category list to be displayed under category options
    const refinedCategories = [];

    const getRefinedCategoryList = async () => {
        try {
            const response = await fetch("/products/categories/refined", {
                method: "GET",
            });

            if (!response.ok) throw new Error("Failed to fetch categories.");

            const data = await response.json();
            if (!data.categories)
                throw new Error("Unexpected API response format.");

            refinedCategories.push(...data.categories);
            populateCategoryDropdown();
        } catch (error) {
            console.error(error.message);
            alert("Error fetching category list. Please try again later!");
        }
    };

    const populateCategoryDropdown = () => {
        const categorySelect = document.getElementById("productCategory");
        categorySelect.innerHTML = ""; // Clear existing options

        // Create a default "Select a category" option
        const defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = "Filter by category";
        categorySelect.appendChild(defaultOption);

        // Add options from the refinedCategories array
        refinedCategories.forEach((category) => {
            const option = document.createElement("option");
            option.value = category.id;
            option.textContent = category.name;
            categorySelect.appendChild(option);
        });
    };

    // Initialize fetching categories when the script loads
    getRefinedCategoryList();

    document
        .getElementById("productCategory")
        .addEventListener("change", async (event) => {
            const categoryName = event.target.value;

            if (categoryName) {
                try {
                    const response = await fetch(
                        `/products?categoryId=${categoryName}`,
                        {
                            method: "GET",
                        }
                    );

                    if (!response.ok)
                        throw new Error("Failed to fetch filtered products.");

                    // Reload the page with the filtered products (or update DOM dynamically)
                    window.location.href = `/products?categoryId=${categoryName}`;
                } catch (error) {
                    console.error(error.message);
                    alert("Error filtering products. Please try again!");
                }
            }
        });

    document
        .getElementById("sortSelect")
        .addEventListener("change", async (event) => {
            const sortOption = event.target.value;

            if (sortOption) {
                try {
                    const response = await fetch(
                        `/products?sortBy=${sortOption}`,
                        {
                            method: "GET",
                        }
                    );

                    if (!response.ok)
                        throw new Error("Failed to fetch sorted products.");

                    // Reload the page with the sorted products (or update DOM dynamically)
                    window.location.href = `/products?sortBy=${sortOption}`;
                } catch (error) {
                    console.error(error.message);
                    alert("Error sorting products. Please try again!");
                }
            }
        });
</script>
