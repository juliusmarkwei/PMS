<div class="">
    <div class="grid grid-cols-2 gap-4 mb-8">
        <!-- Product Image -->
        <div class="flex justify-center items-center col-span-1">
            <img
                src="/products/<%= product.image %>"
                alt="<%= product.name %>"
                class="max-w-full h-[80%] shadow-xl rounded-lg transform transition hover:scale-105 hover:shadow-lg hover:shadow-[#b949bf] object-cover"
            />
        </div>
        <!-- Product Information -->
        <div
            class="py-10 flex flex-col items-start justify-center text-left h-full mr-8 col-span-1 gap-2"
        >
            <h1 class="text-3xl font-bold text-gray-900">
                <%= product.name %>
            </h1>
            <div class="flex flex-col gap-3 w-full">
                <div>
                    <p class="text-xl text-gray-700">
                        Category: <%= product.category.name %>
                    </p>
                </div>
                <div class="w-full flex flex-col items-start justify-center">
                    <h3 class="text-xl font-semibold mb-2">Product Details</h3>
                    <li>
                        <strong>Price: </strong>¢<%= new
                        Intl.NumberFormat('en-US', { minimumFractionDigits: 2,
                        maximumFractionDigits: 2 }).format(product.price) %>
                    </li>
                    <li>
                        <strong>Category: </strong>
                        <%= product.category.name %>
                    </li>
                    <li>
                        <strong>Added on: </strong><%= new
                        Date(product.createdAt).toLocaleDateString() %>
                    </li>
                </div>
            </div>
            <div class="flex items-center space-x-4 py-4">
                <% if (product.stock > 0) { %>
                <span
                    class="bg-green-100 text-green-800 text-sm font-medium px-2.5 py-0.5 rounded"
                >
                    In Stock (<%= product.stock %> available)
                </span>
                <% } else { %>
                <span
                    class="bg-red-100 text-red-800 text-sm font-medium px-2.5 py-0.5 rounded"
                >
                    Out of Stock
                </span>
                <% } %>
            </div>
            <div class="flex gap-4 items-center">
                <a
                    class="cursor-pointer"
                    onclick="deleteProduct('<%= product._id %>')"
                    title="Delete Product"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor"
                        class="size-6 text-red-500"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"
                        />
                    </svg>
                </a>

                <a
                    class="cursor-pointer"
                    onclick="openEditModal('<%= product._id %>', '<%= escape(product.name) %>', '<%= escape(product.description) %>', '<%= escape(product.price) %>', '<%= product.stock %>', '<%= product.image %>', '<%= escape(product.category.name) %>', '<%= escape(product.category._id) %>')"
                    title="Edit Product"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor"
                        class="size-6 text-[#b949bf]"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"
                        />
                    </svg>
                </a>
            </div>
        </div>
        <!-- Product Description -->
        <div class="col-span-2 mx-20">
            <div class="bg-white shadow-md rounded-lg p-6">
                <h2 class="text-2xl font-semibold mb-4 text-gray-900">
                    Product Description
                </h2>
                <p class="text-gray-700 leading-relaxed">
                    <%= product.description %>
                </p>
            </div>
        </div>
    </div>

    <!-- More Products with Same Category Section -->
    <div class="mx-20 my-8">
        <h2 class="text-3xl font-semibold mb-6 text-gray-900 mt-2">
            Similar Products
        </h2>

        <div class="grid grid-cols-3 md:grid-cols-4 gap-4">
            <% otherProducts.forEach(function(product) { %>
            <div
                class="bg-white border h-96 rounded-lg p-4 shadow-sm relative transform transition-all duration-300 hover:scale-105 hover:shadow-lg"
            >
                <img
                    src="/products/<%= product.image %>"
                    alt="<%= product.name %>"
                    class="w-full h-[70%] object-cover rounded mb-4"
                    onerror="this.src='/images/placeholder.png'"
                />
                <h3
                    title="<%= product.name %>"
                    class="text-medium font-semibold mb-2"
                >
                    <%= product.name.length < 62 ? product.name :
                    product.name.slice(0, 62) + '...' %>
                </h3>
                <div
                    class="absolute bottom-2 flex justify-between w-full left-0 px-4"
                >
                    <div class="flex justify-between items-center w-full">
                        <div class="flex gap-2 items-center justify-center">
                            <span class="text-[#c05bc6] font-bold">
                                $<%= Number(product.price).toFixed(2) %>
                            </span>
                            <span class="text-gray-500 text-sm">
                                Stock: <%= product.stock %>
                            </span>
                        </div>
                        <a
                            href="/products/<%= product._id %>"
                            title="Click  to view more..."
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke-width="1.5"
                                stroke="currentColor"
                                class="size-6 hover:text-[#c05bc6]"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
                                />
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                                />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
            <% }); %>
        </div>
    </div>
</div>

<!-- Modal for Editing Book -->
<div
    id="editModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-100"
>
    <div class="bg-white rounded-lg w-[600px] p-5">
        <h2 class="text-3xl font-semibold text-center mb-6 text-[#242847]">
            Edit Product
        </h2>
        <form
            enctype="multipart/form-data"
            id="editProductForm"
            method="POST"
            class="space-y-6"
        >
            <input type="hidden" id="editProductId" />
            <!-- Product Name and Price -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label
                        for="productName"
                        class="block text-gray-700 font-semibold mb-2"
                    >
                        Name
                    </label>
                    <input
                        type="text"
                        id="editName"
                        name="name"
                        required
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#c05bc6] transition duration-300"
                        placeholder="Enter product name"
                    />
                </div>
                <div>
                    <label
                        for="productPrice"
                        class="block text-gray-700 font-semibold mb-2"
                    >
                        Price (¢)
                    </label>
                    <input
                        type="number"
                        id="editPrice"
                        name="price"
                        step="0.01"
                        min="0"
                        required
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#c05bc6] transition duration-300"
                        placeholder="Enter product price"
                    />
                </div>
            </div>

            <!-- Product Description -->
            <div>
                <label
                    for="productDescription"
                    class="block text-gray-700 font-semibold mb-2"
                >
                    Description
                </label>
                <textarea
                    id="editDescription"
                    name="description"
                    rows="4"
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#c05bc6] transition duration-300 resize-none"
                    placeholder="Describe your product..."
                ></textarea>
            </div>

            <!-- Product Image -->
            <div>
                <label
                    for="productImage"
                    class="block text-gray-700 font-semibold mb-2"
                >
                    Image
                </label>
                <div class="flex items-center justify-center w-full">
                    <label
                        id="previewContainer"
                        for="productImage"
                        class="flex flex-col border-4 border-dashed border-gray-300 hover:bg-gray-100 hover:border-[#c05bc6] group relative w-full p-6 text-center cursor-pointer rounded-lg transition duration-300"
                    >
                        <div class="flex flex-col items-center justify-center">
                            <svg
                                class="w-12 h-12 text-gray-400 group-hover:text-[#c05bc6] transition"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                                ></path>
                            </svg>
                            <p
                                class="text-sm text-gray-500 group-hover:text-[#c05bc6] mt-2 transition"
                            >
                                Click to upload
                            </p>
                        </div>
                    </label>
                    <input
                        type="file"
                        id="productImage"
                        name="productImage"
                        accept="image/*"
                        class="hidden"
                        required
                    />
                </div>
            </div>

            <!-- Product Category and Stock -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label
                        for="productCategory"
                        class="block text-gray-700 font-semibold mb-2"
                    >
                        Category
                    </label>
                    <select
                        id="editCategory"
                        name="categoryId"
                        required
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#c05bc6] transition duration-300"
                    >
                        <option value="">Select a category</option>
                    </select>
                </div>
                <div>
                    <label
                        for="productStock"
                        class="block text-gray-700 font-semibold mb-2"
                    >
                        Stock Quantity
                    </label>
                    <input
                        type="number"
                        id="editStock"
                        name="stock"
                        min="0"
                        required
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#c05bc6] transition duration-300"
                        placeholder="Enter stock quantity"
                    />
                </div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end space-x-6">
                <a
                    type="button"
                    onclick="closeEditModal()"
                    class="bg-[#242847] text-white p-2 cursor-pointer rounded-md text-base"
                >
                    Cancel
                </a>
                <a
                    class="bg-[#29C782] text-white p-2 cursor-pointer rounded-md text-base"
                    onclick="handleEditProductFormSubmit(closeEditModal)"
                >
                    Save Changes
                </a>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const createdAtElement = document.querySelector(
            "strong[data-created-at]"
        );
        if (createdAtElement) {
            const rawDate = createdAtElement.textContent.trim();
            const formattedDate = new Date(rawDate).toLocaleDateString(
                "en-US",
                {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                }
            );
            createdAtElement.textContent = formattedDate;
        }
    });

    // delete book functionality
    async function deleteProduct(bookId) {
        const confirmation = confirm(
            "Are you sure you want to delete this product?"
        );

        if (confirmation) {
            try {
                const response = await fetch(
                    `
                    /products/${bookId}`,
                    {
                        method: "DELETE",
                    }
                );

                if (response.ok) {
                    alert("Product deleted successfully");
                    window.location.replace("/products/");
                } else {
                    alert("Failed to delete Product, please try again");
                }
            } catch (error) {
                alert("Error deleting book, try again later");
            }
        }
    }

    // Update product functionality
    let _categoryId;
    function openEditModal(
        id,
        name,
        description,
        price,
        stock,
        image,
        categoryName,
        categoryId
    ) {
        const decodedName = decodeURIComponent(name);
        const decodedDescription = decodeURIComponent(description);
        const decodedPrice = decodeURIComponent(price);
        const decodedStock = decodeURIComponent(stock);
        const decodedCategoryName = decodeURIComponent(categoryName);
        _categoryId = categoryId;

        document.getElementById("editModal").classList.remove("hidden");
        document.getElementById("editProductId").value = id;
        document.getElementById("editName").value = decodedName;
        document.getElementById("editDescription").value = decodedDescription;
        document.getElementById("editPrice").value = decodedPrice;
        document.getElementById("editStock").value = decodedStock;

        // Handle image preview and label update
        const imageElement = document.getElementById("previewContainer");
        if (image) {
            // Update the preview with the existing image
            imageElement.style.backgroundImage = `url('/products/${image}')`;
            imageElement.style.backgroundSize = "cover";
            imageElement.style.backgroundPosition = "center";
            imageElement.style.backgroundRepeat = "no-repeat";
        } else {
            // Reset to default if no image is passed
            imageElement.style.backgroundImage = "none";
            imageElement.innerHTML = `
            <div class="flex flex-col items-center justify-center">
                <svg
                    class="w-12 h-12 text-gray-400 group-hover:text-[#c05bc6] transition"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                    ></path>
                </svg>
                <p
                    class="text-sm text-gray-500 group-hover:text-[#c05bc6] mt-2 transition"
                >
                    Click to upload
                </p>
            </div>
        `;
        }

        // Select the correct category in the dropdown
        const categorySelect = document.getElementById("editCategory");
        categorySelect.options[categorySelect.selectedIndex].textContent =
            decodedCategoryName;

        // Dynamically set the form action URL with the product ID
        document.getElementById("editProductForm").action = `/products/${id}`;
        document.getElementById("editProductForm").enctype =
            "multipart/form-data";

        document.body.classList.add("overflow-hidden");
    }

    function closeEditModal() {
        document.getElementById("editModal").classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
    }

    // handle image change events
    const imageUpload = document.getElementById("productImage");
    const previewContainer = document.getElementById("previewContainer");

    // Create a new form data object to hold the product data and image file
    const formData = new FormData();

    // Custom click handling for file upload
    imageUpload.addEventListener("change", () => {
        const file = imageUpload.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.createElement("img");
                preview.src = e.target.result;
                preview.alt = "Product Image Preview";
                preview.classList.add(
                    "h-[50%]",
                    "w-full",
                    "object-cover",
                    "rounded-lg"
                );

                preview.style.maxHeight = "300px";
                preview.style.width = "auto";
                preview.style.objectFit = "contain";

                // Clear any previous background image and preview content
                previewContainer.style.backgroundImage = "none";
                previewContainer.style.backgroundSize = "";
                previewContainer.style.backgroundPosition = "";
                previewContainer.style.backgroundRepeat = "";
                previewContainer.innerHTML = "";

                // Append the new preview image
                previewContainer.appendChild(preview);

                // add image file to the form data
                formData.append("productImage", file);
            };
            reader.readAsDataURL(file);
        }
    });

    function handleEditProductFormSubmit(closeModalFunction) {
        const productId = document.getElementById("editProductId").value;
        const name = document.getElementById("editName").value;
        const description = document.getElementById("editDescription").value;
        const price = document.getElementById("editPrice").value;
        const stock = document.getElementById("editStock").value;

        // Prepare the data to be sent
        formData.append("name", name);
        formData.append("description", description);
        formData.append("price", parseFloat(price));
        formData.append("stock", parseInt(stock, 10));
        formData.append("categoryId", _categoryId);

        console.log(formData);

        // Send data to the server using fetch
        async function updateProduct(id, formData) {
            try {
                const response = await fetch(`/products/${id}`, {
                    method: "PUT",
                    body: formData,
                });

                const data = await response.json();

                if (data.success) {
                    alert("Product updated successfully!");
                    window.location.reload();
                } else {
                    alert("Error updating product: " + data.message);
                }
            } catch (error) {
                console.error("Error:", error);
                alert("An unexpected error occurred.");
            }
        }

        updateProduct(productId, formData);

        // Call the provided close modal function
        if (typeof closeModalFunction === "function") {
            closeModalFunction();
        }
    }

    // get category list to be displayed under category options
    const refinedCategories = [];

    const getRefinedCategoryList = async () => {
        try {
            const response = await fetch("/products/categories/refined", {
                method: "GET",
            });

            if (!response.ok) throw new Error("Failed to fetch categories.");

            const data = await response.json();
            if (!data.categories)
                throw new Error("Unexpected API response format.");

            refinedCategories.push(...data.categories);
            populateCategoryDropdown();
        } catch (error) {
            console.error(error.message);
            alert("Error fetching category list. Please try again later!");
        }
    };

    const populateCategoryDropdown = () => {
        const categorySelect = document.getElementById("editCategory");

        // Create a default "Select a category" option
        const defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = "Select a category";
        categorySelect.appendChild(defaultOption);

        // Add options from the refinedCategories array
        refinedCategories.forEach((category) => {
            const option = document.createElement("option");
            option.value = category._id;
            option.textContent = category.name;
            categorySelect.appendChild(option);
        });
    };

    // Initialize fetching categories when the script loads
    getRefinedCategoryList();
</script>
